
function dwn_sampler_config(this_block)

  % Revision History:
  %
  %   15-Jun-2014  (11:40 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/aruls/projects/phd/g729/design/hpf/dwn_sampler.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('dwn_sampler');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('sys_rst_n');
  this_block.addSimulinkInport('sys_audio_sample');

  this_block.addSimulinkOutport('sys_async_rst_n');
  this_block.addSimulinkOutport('dwn_smp_audio_sample');
  this_block.addSimulinkOutport('dwn_smp_smp_vld');

  sys_async_rst_n_port = this_block.port('sys_async_rst_n');
  sys_async_rst_n_port.setType('UFix_1_0');
  sys_async_rst_n_port.useHDLVector(false);
  dwn_smp_smp_vld_port = this_block.port('dwn_smp_smp_vld');
  dwn_smp_smp_vld_port.setType('UFix_1_0');
  dwn_smp_smp_vld_port.useHDLVector(false);
  dwn_smp_audio_sample_port = this_block.port('dwn_smp_audio_sample'); ...
  dwn_smp_audio_sample_port.setType('XFloat_8_24');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('sys_rst_n').width ~= 1);
      this_block.setError('Input data type for port "sys_rst_n" must have width=1.');
    end

    this_block.port('sys_rst_n').useHDLVector(false);

    % (!) Port 'sys_audio_sample' appeared to have dynamic type in the HDL -- please add type checking as appropriate;
    if (this_block.port('sys_audio_sample').width ~= 32);
      this_block.setError('Input data type for port "sys_audio_sample" must have width=32.');
    end

   % (!) Port 'dwn_smp_audio_sample' appeared to have dynamic type in the HDL
    if (this_block.port('dwn_smp_audio_sample').width ~= 32);
      this_block.setError('Input data type for port "dwn_smp_audio_sample" must have width=32.');
    end


  % --- you must add an appropriate type setting for this port
  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'sys_clk','sys_ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('SAMPLE_RATE','integer','20');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('../hpf/dwn_sampler.v');

  % Add other modules for the floating point arithmetic 
  this_block.addFile('../arith/xil/fp_adder.v');
  this_block.addFile('../arith/xil/fp_sub.v');
  this_block.addFile('../arith/xil/fp_mult.v');
  this_block.addFile('../arith/xil/fp_div.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

